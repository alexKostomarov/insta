{"version":3,"sources":["logo.svg","Row.js","Select.js","App.js","config.js","serviceWorker.js","index.js"],"names":["module","exports","Row","props","className","data","valuteID","numCode","charCode","value","date","Select","onChangeHandler","e","val","target","options","selectedIndex","keyname","updateState","state","items","fetch","this","url","method","headers","then","res","json","map","obj","setState","item","reduce","arr","id","idx","push","key","size","onChange","Component","App","getData","path","Api","valuteId","startDate","endDate","rows","undefined","error","str","HOST","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7866d7ca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\n//Компонент отрисовки строки данных\r\n//данные в props.data\r\nexport default function Row(props) {\r\n    return(\r\n        <div className=\"row\">\r\n            <div className=\"valuteId col-md-3\">{props.data.valuteID}</div>\r\n            <div className=\"numCode col-md-2\">{props.data.numCode}</div>\r\n            <div className=\"charCode col-md-2\">{props.data.charCode}</div>\r\n            <div className=\"value col-md-3\">{props.data.value}</div>\r\n            <div className=\"datecol-md-2\">{props.data.date}</div>\r\n        </div>\r\n    )\r\n}","import React, {Component} from \"react\";\r\n\r\n//Компонент вападающего списка.\r\n// Источник данных а пропсах:props.url.\r\n// Данные отдаются через props.updateState\r\nexport default class Select extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            items:[]\r\n        };\r\n    }\r\n\r\n    componentDidMount(){//Получить данные для списка\r\n\r\n        const init = {\r\n            method: 'GET',\r\n            headers:{\r\n                'Content-Type': 'application/json'\r\n            }\r\n        };\r\n\r\n        fetch( this.props.url, init).then(res =>res.json()).then(json =>{\r\n\r\n            const items = json.map( obj =>{ return obj});\r\n            this.setState({items:items});//запихнуть данные в местный стейт\r\n            const item = items[0];\r\n            this.props.updateState(this.props.keyname, item);//выставить данные в главном стейте, чтобы не ушла пустая строка\r\n        })\r\n    }\r\n    /*\r\n    Обработчик выбора в списке\r\n     */\r\n   onChangeHandler = (e) => {\r\n\r\n        const val = e.target.options[e.target.selectedIndex].value;\r\n\r\n        const keyname = this.props.keyname;\r\n\r\n        this.props.updateState(keyname, val);\r\n    }\r\n\r\n    render(){\r\n       //список Option для списка\r\n        const options = this.state.items.reduce( (arr, id, idx) =>{\r\n            arr.push( (<option value={id} key={idx}>{id}</option>));\r\n            return arr;\r\n        }, []);\r\n\r\n        return(\r\n            <select size='1' onChange={this.onChangeHandler}>\r\n                {options}\r\n            </select>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport './Row';\nimport Row from \"./Row\";\nimport Select from './Select'\nimport {ValuteIdList, DateList, Api} from \"./config\";\n\n//все приложение\nexport default class App extends Component{\n\n    constructor(props){\n        super(props);\n        this.state={\n            rows:[],\n            valuteId:undefined,\n            startDate:undefined,\n            endDate:undefined,\n            error:undefined\n        }\n    }\n\n    //передается в низлежащие компоненты\n    updateState = ( key, value) =>{\n        let state = this.state;\n        state[key] = value;\n        this.setState(state);\n    }\n\n    //получение данных от Api\n    getData = () =>{\n\n        //id валюты\n        const valuteId = this.state.valuteId;\n\n        //адрес api\n        let path = Api +  \"/\" + valuteId + \"/\";\n        path += this.state.startDate ? (this.state.startDate + \"/\") : \"\";\n        path += this.state.endDate ? this.state.endDate : '';\n\n\n        const init = {\n            method: 'GET',\n            headers:{\n                'Content-Type': 'application/json'\n            }\n        };\n\n        fetch( path, init).then(res =>res.json()).then(json =>{\n            this.setState({rows:json});\n        })\n    }\n\n    render(){\n\n    const rows = this.state.rows.reduce((arr, data) =>{\n        const str = (<Row data={data} key={data.id}/>);\n        arr.push(str);\n        return arr;\n    }, []);\n\n    return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n              <div className=\"row text-md-right m-md-3\">\n                  <div className=\"col-md-2\">Id валюты:</div>\n                  <Select className=\"col-md-1 \" url={ValuteIdList} keyname='valuteId' updateState={this.updateState}/>\n                  <div className=\"col-md-2\">Начальная дата:</div>\n                  <Select className=\"col-md-1 \" url={DateList} keyname='startDate' updateState={this.updateState}/>\n                  <div className=\"col-md-2\">Конечная дата:</div>\n                  <Select className=\"col-md-1 \" url={DateList} keyname='endDate' updateState={this.updateState}/>\n                  <button className=\"offset-md-1 col-md-1 \" onClick={this.getData}>Показать</button>\n              </div>\n          </header>\n            <div className='container'>\n                <div className='alert'>{this.state.error}</div>\n                <div className=\"row border-bottom\">\n                    <div className=\"valuteId col-md-3\">Id валюты:</div>\n                    <div className=\"numCode col-md-2\">Числовой код:</div>\n                    <div className=\"charCode col-md-2\">Символьный код</div>\n                    <div className=\"value col-md-3\">Значение</div>\n                    <div className=\"datecol-md-2\">Дата</div>\n                </div>\n                {rows}\n            </div>\n        </div>\n    );\n  }\n}\n","const HOST = \"http://insta\";\r\nexport const Api = HOST + \"/api\";\r\nexport const ValuteIdList = HOST + \"/api/valuteId\";\r\nexport const DateList = HOST + \"/api/dates\";\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}